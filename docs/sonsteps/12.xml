<code_changes>
  <changed_files>
    <file>
      <file_operation>CREATE</file_operation>
      <file_path>client/src/components/MethodList.tsx</file_path>
      <file_code><![CDATA[
/**
 * <ai_info>
 * This file defines the MethodList component, responsible for fetching and displaying
 * a list of method selectors for a given SON class name from the backend API.
 * It manages loading and error states for the API call and uses the generic
 * ListView component for rendering.
 * </ai_info>
 *
 * @file client/src/components/MethodList.tsx
 * @description Component to display a list of method selectors for a selected class.
 *
 * Key features:
 * - Fetches method selectors using `apiClient.getMethods` when a class name is provided.
 * - Handles loading and error states during the fetch operation.
 * - Uses the `ListView` component for consistent list rendering and selection handling.
 * - Accepts `selectedClassName` to know which class's methods to fetch.
 * - Accepts `selectedMethodSelector` to highlight the currently selected method.
 * - Calls `onMethodSelect` callback when a method is selected.
 *
 * @dependencies
 * - React: `useState`, `useEffect`.
 * - ../lib/apiClient: `getMethods` function.
 * - ./ui/ListView: Generic list rendering component.
 *
 * @notes
 * - Marked as a client component ("use client").
 * - Handles the case where no class is selected (`selectedClassName` is null).
 */
"use client";

import React, { useState, useEffect } from 'react';
import { getMethods } from '@/lib/apiClient';
import ListView from './ui/ListView'; // Import the generic ListView

interface MethodListProps {
  /** The name of the class whose methods should be displayed. Null if no class selected. */
  selectedClassName: string | null;
  /** The currently selected method selector (passed down for highlighting). */
  selectedMethodSelector: string | null;
  /** Callback function triggered when a method selector is clicked by the user. */
  onMethodSelect: (selector: string) => void;
  /** Optional additional CSS classes for the container */
  className?: string;
}

/**
 * MethodList Component
 *
 * Fetches and displays a list of method selectors for the given `selectedClassName`.
 * Allows users to select a method from the list.
 *
 * @param {MethodListProps} props - Component props.
 * @returns {JSX.Element} The MethodList component.
 */
export default function MethodList({
  selectedClassName,
  selectedMethodSelector,
  onMethodSelect,
  className = ""
}: MethodListProps): JSX.Element {
  const [methods, setMethods] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false); // Not loading initially
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Only fetch methods if a class name is actually selected
    if (selectedClassName) {
      const fetchMethods = async () => {
        setIsLoading(true);
        setError(null);
        setMethods([]); // Clear previous methods while loading
        console.log(`MethodList: Fetching methods for class "${selectedClassName}"...`);
        try {
          // Call the API client function to get methods for the selected class
          const response = await getMethods(selectedClassName);
          setMethods(response.methods);
          console.log(`MethodList: Fetched ${response.methods.length} methods for "${selectedClassName}".`);
        } catch (err: any) {
          console.error(`MethodList: Failed to fetch methods for "${selectedClassName}":`, err);
          setError(err.message || `Failed to load methods for ${selectedClassName}.`);
        } finally {
          setIsLoading(false);
        }
      };

      fetchMethods();
    } else {
      // If no class is selected, clear the methods list and reset state
      setMethods([]);
      setIsLoading(false);
      setError(null);
    }
  }, [selectedClassName]); // Dependency array: re-run effect when selectedClassName changes

  return (
    <ListView
      items={methods}
      selectedItem={selectedMethodSelector}
      onSelect={onMethodSelect} // Pass the selection handler down
      isLoading={isLoading}
      error={error}
      title="Methods"
      // Provide more specific placeholders based on whether a class is selected
      loadingPlaceholder={selectedClassName ? `Loading methods for ${selectedClassName}...` : "Select a class first"}
      emptyPlaceholder={selectedClassName ? `No methods found for ${selectedClassName}.` : "Select a class to view methods"}
      className={`min-h-[100px] ${className}`} // Add min-height
    />
  );
}
]]>
</file_code>
</file>
<file>
  <file_operation>UPDATE</file_operation>
  <file_path>client/src/components/SystemBrowser.tsx</file_path>
  <file_code><![CDATA[/**
<ai_info>
This file defines the SystemBrowser component, which serves as the container
for browsing SON classes and their methods. It orchestrates the ClassList,
MethodList, and CodeViewer components, managing the selected class and method state.
</ai_info>
@file client/src/components/SystemBrowser.tsx
@description Container component for the SON System Browser interface.
Key features:
Manages the state for selectedClassName and selectedMethodSelector.
Renders the ClassList component.
Renders the MethodList component, passing necessary props.
Renders placeholders for CodeViewer (to be implemented later).
Uses Tailwind CSS for a multi-panel layout (Classes, Methods, Code).
@dependencies
React: useState.
./ClassList: Component to display the list of classes.
./MethodList: Component to display the list of methods for the selected class.
./ui/Panel: Reusable panel component (optional, but used for structure).
@notes
Marked as a client component ("use client").
State is managed locally within this component for now.
The layout divides the browser into three main sections.
*/
"use client"; // Correct directive
import React, { useState } from 'react';
import ClassList from './ClassList';
import MethodList from './MethodList'; // Import MethodList
import Panel from './ui/Panel'; // Optional panel component
/**
SystemBrowser Component
Provides the main interface for browsing SON classes and methods.
Contains ClassList, MethodList, and CodeViewer (placeholder).
@returns {JSX.Element} The SystemBrowser component.
*/
export default function SystemBrowser(): JSX.Element {
const [selectedClassName, setSelectedClassName] = useState<string | null>(null);
// State for selected method - used by MethodList and CodeViewer
const [selectedMethodSelector, setSelectedMethodSelector] = useState<string | null>(null);
/**
Handles the selection of a class from the ClassList component.
Updates the selected class name state and resets the selected method.
@param className - The name of the selected class.
*/
const handleClassSelect = (className: string) => {
console.log("SystemBrowser: Class selected:", className);
// Only update if the class name actually changed to avoid unnecessary re-renders/fetches
if (className !== selectedClassName) {
setSelectedClassName(className);
setSelectedMethodSelector(null); // Reset method selection when class changes
}
};
/**
Handles the selection of a method from the MethodList component.
Updates the selected method selector state.
@param selector - The selector of the selected method.
*/
const handleMethodSelect = (selector: string) => {
console.log("SystemBrowser: Method selected:", selector);
setSelectedMethodSelector(selector);
};
return (
// Main container for the browser, using flex column layout
<div className="flex flex-col h-full space-y-2 p-2 bg-gray-100 dark:bg-gray-900">
{/* Class List Panel /}
<div className="flex-shrink-0 h-1/3 overflow-hidden">
{/ Min height ensures visibility even if list is short initially */}
<ClassList
selectedClassName={selectedClassName}
onClassSelect={handleClassSelect}
className="h-full" // Make ClassList fill its container height
/>
</div>
{/* Method List Panel */}
  <div className="flex-shrink-0 h-1/3 overflow-hidden">
    {/* Render the actual MethodList component */}
    <MethodList
      selectedClassName={selectedClassName}
      selectedMethodSelector={selectedMethodSelector}
      onMethodSelect={handleMethodSelect}
      className="h-full" // Make MethodList fill its container height
    />
  </div>

  {/* Code Viewer Panel (Placeholder) */}
  <div className="flex-grow overflow-hidden">
     <Panel title="Code" className="h-full flex flex-col">
         <div className="flex-grow flex items-center justify-center text-gray-400 dark:text-gray-500 text-sm p-4 text-center">
            {selectedMethodSelector
                ? `(Code View for ${selectedClassName} >> ${selectedMethodSelector})`
                : selectedClassName
                    ? "(Select a method to view code)"
                    : "(Select a class and method)"
            }
             {/* CodeViewer component will go here, passing selectedClassName and selectedMethodSelector */}
         </div>
     </Panel>
  </div>
</div>
]]>
</file_code></file>
  </changed_files>
</code_changes>