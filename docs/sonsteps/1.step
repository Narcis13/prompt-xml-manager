Okay, let's start with Step 1 of the implementation plan: Initializing the project structure and dependencies.
Step 1: Initialize Project Structure and Dependencies
Task: Create the root directory, client and server subdirectories. Initialize the Next.js project in client and a basic Bun project in server. Set up .gitignore.
Files:
son-environment/.gitignore: Add basic Node, Bun, Next.js, OS ignores.
son-environment/server/package.json: Update generated package.json for Bun server specifics.
son-environment/server/tsconfig.json: Basic TSConfig for Bun server.
User Instructions:
Create the root directory son-environment.
Inside son-environment, run bun create next ./client --typescript --tailwind --eslint --app --src-dir --import-alias "@/*". This sets up the Next.js client application.
Inside son-environment, create the server directory.
Inside son-environment/server, run bun init -y. This creates a basic package.json.
Update the contents of son-environment/server/package.json with the code provided below.
Inside son-environment/server, run bun add bun-types --dev. This adds necessary TypeScript types for Bun.
Create the son-environment/server/tsconfig.json file with the content provided below.
Create the son-environment/.gitignore file with the content provided below.
<code_changes>
  <changed_files>
    <file>
      <file_operation>CREATE</file_operation>
      <file_path>.gitignore</file_path>
      <file_code><![CDATA[
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# Node.js / Bun dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# Bun artefacts
/bun.lockb

# Next.js build outputs
/.next/
/out/

# Testing artefacts
/coverage

# Production artefacts
/build

# Misc
.DS_Store
*.pem

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# OS generated files #
######################
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Environment variables
.env
.env*.local
.env.development.local
.env.test.local
.env.production.local

# SQLite Database files
*.sqlite
*.sqlite-journal

# IDE files
.idea
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.sublime-workspace

# TypeScript cache
*.tsbuildinfo
]]></file_code>
    </file>
    <file>
      <file_operation>UPDATE</file_operation>
      <file_path>server/package.json</file_path>
      <file_code><![CDATA[
{
  "name": "son-server",
  "module": "server.ts",
  "type": "module",
  "scripts": {
    "start": "bun run server.ts",
    "dev": "bun run --watch server.ts"
  },
  "devDependencies": {
    "bun-types": "latest"
  },
  "peerDependencies": {
    "typescript": "^5.0.0"
  }
}
]]></file_code>
    </file>
    <file>
      <file_operation>CREATE</file_operation>
      <file_path>server/tsconfig.json</file_path>
      <file_code><![CDATA[
{
  "compilerOptions": {
    // Standard ECMAScript target
    "target": "ESNext",
    // Standard module system
    "module": "ESNext",
    // Resolve modules using Node.js algorithm
    "moduleResolution": "node",
    // Enable stricter type checking
    "strict": true,
    // Ensure case-correct imports
    "forceConsistentCasingInFileNames": true,
    // Skip type checking of declaration files
    "skipLibCheck": true,
    // Allow default imports from modules with no default export
    "allowSyntheticDefaultImports": true,
    // Enable experimental decorators (optional, but common)
    "experimentalDecorators": true,
    // Emit decorator metadata (optional, depends on libraries like TypeORM)
    "emitDecoratorMetadata": true,
    // Include Bun's built-in types
    "types": ["bun-types"],
    // Base URL for module resolution (optional)
    // "baseUrl": ".",
    // Path mapping (optional)
    // "paths": {
    //   "@/*": ["src/*"]
    // },
    "esModuleInterop": true,
    // Ensure 'lib' includes DOM for things like fetch, URL, etc. if needed, though Bun provides them globally.
    "lib": ["ESNext", "DOM"]
  },
  // Define which files TypeScript should include in compilation
  "include": ["**/*.ts"],
  // Define which files TypeScript should exclude
  "exclude": ["node_modules", "dist", "build"]
}
]]></file_code>
    </file>
  </changed_files>
</code_changes>
Use code with caution.
Xml
STEP 1 COMPLETE. Here's what I did and why:
.gitignore (CREATE): Created a standard .gitignore file suitable for Node.js/Bun/Next.js projects, including ignoring node_modules, build outputs, environment files, logs, OS-specific files, IDE files, and importantly, SQLite database files (*.sqlite, *.sqlite-journal). This prevents sensitive or unnecessary files from being committed to version control.
server/package.json (UPDATE): Updated the package.json generated by bun init. Specified the entry point ("module": "server.ts"), ensured "type": "module" for ES module syntax, added basic start and dev scripts using bun run, and listed bun-types under devDependencies (as per user instructions) along with typescript as a peer dependency. This configures the Bun server project basics.
server/tsconfig.json (CREATE): Created a standard TypeScript configuration file for the Bun server. It sets modern targets (ESNext), module systems (ESNext), enables strict type checking, includes bun-types for Bun-specific APIs, and specifies which files to include/exclude. This allows for type-safe development in the backend.
USER INSTRUCTIONS: Please do the following:
If you haven't already, create the root project directory: mkdir son-environment && cd son-environment
Create the client application structure: bun create next ./client --typescript --tailwind --eslint --app --src-dir --import-alias "@/*"
Create the server directory: mkdir server
Initialize the Bun server project: cd server && bun init -y
Apply the generated code: Replace the contents of server/package.json with the code provided above. Create the server/tsconfig.json and root .gitignore files with the code provided above.
Install Bun types for the server: bun add bun-types --dev
Navigate back to the root directory if needed: cd ..
You should now have the basic project structure and configuration files in place.
